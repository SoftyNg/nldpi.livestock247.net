                                    <?php foreach ($butcheries_list as $butchery) {
                                            
                                            $butcery_url = BASE_URL.'users/orders/'.$butchery->id;
                                        ?>
                                        <tr>
                                            <td><?= $butchery->butchery_name; ?></td>
                                            <td><?= $butchery->address; ?></td>
                                            <td><?= $butchery->email_address; ?></td>
                                            <td><?= $butchery->phone_number; ?></td>
                                            <td>
                                                <a href="" class="btn btn-warning edit-butchery" id="<?= $butchery->id ?>" data-toggle="modal" data-target="#<?= $butchery->id ?>editButchery" ><i class="fa fa-edit fa-sm"></i> Edit</a>
                                                <a href="" class="btn btn-danger delete-butchery" id-data="<?= $butchery->id ?>" data-toggle="modal" data-target="#<?= $butchery->id ?>deleteButchery" ><i class="fa fa-trash fa-sm"></i> Delete</a>
                                             
                                                <!-- EDIT BUTCHERY MODAL -->
                                                <div class="modal fade" role="dialog" id="<?= isset($butchery->id)? $butchery->id : ''  ?>editButchery">
                                                    <?php

                                                        $form_location_edit_butchery = BASE_URL . 'users/update_butchery';
                                                        $form_location_delete_butchery = BASE_URL . 'users/delete_butchery';

                                                        $result = Modules::run('users/get_butchery',$butchery->id)[0];
                                    
                                                    ?>
                                                    <div class="modal-dialog">

                                                        <!-- Modal CONTENT-->
                                                        <div class="modal-content">
                                                            <div class="modal-header">
                                                                <h4 class="modal-title text-primary" ><?= ucwords(strtolower($result->butchery_name)) ?> Butchery</h4>
                                                                <a  class="close" data-dismiss="modal">&times;</a>
                                                            </div>
                                                            <form action="<?= $form_location_edit_butchery ?>" method="POST">
                                                                <input type="hidden" name="butchery_id" value="<?= $result->id ?>">
                                                                <div class="modal-body">
                                                                    <div class="form-group">
                                                                        <label>Name</label>
                                                                        <input type="text" class="form-control" name="butchery_name" value="<?= $result->butchery_name ?>" place="Enter butchery name" required>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Address</label>
                                                                        <input type="text" class="form-control" name="address" value="<?= $result->address ?>" place="Enter address location" required>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Email</label>
                                                                        <input type="email" class="form-control" name="email_address"  value="<?= $result->email_address ?>" place="Enter email address" required>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label>Phone Number</label>
                                                                        <input type="text" class="form-control"  name="phone_number" value="<?= $result->phone_number ?>"  place="Enter phone number" required>
                                                                    </div>
                                                            
                                                                </div>
                                                                <div class="modal-footer">
                                                                    <button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>
                                                                    <button type="submit" class="btn btn-primary">Save</button>
                                                                </div>
                                                            </form>
                                                        </div>

                                                    </div>
                                                </div>



                                                <!-- DELETE BUTCHERY MODAL-->
                                                <div class="modal fade" id="<?= isset($butchery->id)? $butchery->id : ''  ?>deleteButchery" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel"
                                                    aria-hidden="true">
                                                    <div class="modal-dialog" role="document">
                                                        <form action="<?= $form_location_delete_butchery ?>" method="POST">
                                                            <input type="hidden" value="<?= isset($butchery->id)? $butchery->id : ''  ?>" name="butchery_id">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h5 class="modal-title" id="exampleModalLabel">Are you sure you want to delete <?= $result->butchery_name ?>?</h5>
                                                                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                                                                        <span aria-hidden="true">Ã—</span>
                                                                    </button>
                                                                </div>
                                                                <div class="modal-body">Click on delete button to remove <?= ucwords(strtolower($result->butchery_name)) ?> butchery from list.</div>
                                                                <div class="modal-footer">
                                                                    <button class="btn btn-warning" type="button" data-dismiss="modal">Cancel</button>
                                                                    <button type="submit" class="btn btn-primary" >Delete</button>
                                                                </div>
                                                            </div>
                                                        </form>    
                                                    </div>
                                                </div>

                                            </td>
                                        </tr>
                                        <?php
                                    }
                                    ?>

















<?php

/**
 * Class Core
 * Manages the serving of assets for the Trongate framework.
 */
class Core {

    protected $current_module = DEFAULT_MODULE;
    protected $current_controller = DEFAULT_CONTROLLER;
    protected $current_method = DEFAULT_METHOD;
    protected $current_value = '';

    /**
     * Constructor for the Core class.
     * Depending on the URL, serves either vendor assets, controller content, or module assets.
     */
    public function __construct() {
        if (strpos(ASSUMED_URL, '/vendor/')) {
            $this->serve_vendor_asset();
        } elseif (strpos(ASSUMED_URL, MODULE_ASSETS_TRIGGER) === false) {
            $this->serve_controller();
        } else {
            $this->serve_module_asset();
        }
    }

    /**
     * Serve vendor assets.
     *
     * @return void
     */
    private function serve_vendor_asset(): void {
        $vendor_file_path = explode('/vendor/', ASSUMED_URL)[1];
        $vendor_file_path = '../vendor/' . $vendor_file_path;
        
        try {
            $vendor_file_path = $this->sanitize_file_path($vendor_file_path, '../vendor/');
            
            if (file_exists($vendor_file_path)) {
                if (strpos($vendor_file_path, '.css')) {
                    $content_type = 'text/css';
                } else {
                    $content_type = 'text/plain';
                }

                header('Content-type: ' . $content_type);
                $contents = file_get_contents($vendor_file_path);
                echo $contents;
                die();
            } else {
                die('Vendor file not found.');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    /**
     * Sanitize file paths to prevent directory traversal.
     *
     * @param string $path The path to sanitize.
     * @param string $base_dir The base directory to compare against.
     * @param bool $is_child_module True if attempting to sanitize the path for a child module asset
     * @return string The sanitized path.
     * @throws Exception if the path is invalid.
     */
    private function sanitize_file_path(string $path, string $base_dir, bool $is_child_module = false): string {
        $real_base_dir = realpath($base_dir);
        $real_path = realpath($path);

        if ( (!$real_path || strpos($real_path, $real_base_dir) !== 0) && !$is_child_module ) {

            $real_path = $this->sanitize_file_path($path, $base_dir, true);

        } else if ($is_child_module) {

            $path_bits = explode('/',$path);
            $path_bits[2] = str_replace('-','/',$path_bits[2]); // split target module into parent/child
            $real_path = realpath(implode('/',$path_bits));

            if (!$real_path || strpos($real_path, $real_base_dir) !== 0) {
                http_response_code(404);
                throw new Exception('Invalid file path.');
            }
        }

        return $real_path;
    }

    /**
     * Serve module assets.
     *
     * @return void
     */
    private function serve_module_asset(): void {
        $url_segments = SEGMENTS;

        foreach ($url_segments as $url_segment_key => $url_segment_value) {
            $pos = strpos($url_segment_value, MODULE_ASSETS_TRIGGER);

            if (is_numeric($pos)) {
                $target_module = str_replace(MODULE_ASSETS_TRIGGER, '', $url_segment_value);
                $file_name = $url_segments[count($url_segments) - 1];

                $target_dir = '';
                for ($i = $url_segment_key + 1; $i < count($url_segments) - 1; $i++) {
                    $target_dir .= $url_segments[$i];
                    if ($i < count($url_segments) - 2) {
                        $target_dir .= '/';
                    }
                }

                $asset_path = '../modules/' . strtolower($target_module) . '/assets/' . $target_dir . '/' . $file_name;
                
                try {
                    $asset_path = $this->sanitize_file_path($asset_path, '../modules/');
                    
                    if (is_file($asset_path)) {
                        if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && 
                            strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) >= filemtime($asset_path)) {
                                header('Last-Modified: '.gmdate('D, d M Y H:i:s',  filemtime($asset_path)).' GMT', true, 304);
                                die;
                        }
                        
                        $content_type = mime_content_type($asset_path);

                        if ($content_type === 'text/plain' || $content_type === 'text/html') {
                            if (strpos($file_name, '.css') !== false) {
                                $content_type = 'text/css';
                            } elseif (strpos($file_name, '.js') !== false) {
                                $content_type = 'text/javascript';
                            }
                        }

                        if ($content_type === 'image/svg') {
                            $content_type .= '+xml';
                        }

                        // Make sure it's not a PHP file or api.json
                        if (strpos($content_type, 'php') !== false || $file_name === 'api.json') {
                            http_response_code(403);
                            die();
                        }

                        header('Content-type: ' . $content_type);
                        header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($asset_path)) . ' GMT');
                        readfile($asset_path);
                        die;
                    } 
                } catch (Exception $e) {
                    die($e->getMessage());
                }
            }
        }
    }


    /**
     * Attempt SQL transfer.
     *
     * @param string $controller_path The path to the controller.
     * @return void
     */
    private function attempt_sql_transfer(string $controller_path): void {
        $ditch = 'controllers/' . $this->current_controller . '.php';
        $dir_path = str_replace($ditch, '', $controller_path);

        $files = array();
        foreach (glob($dir_path . "*.sql") as $file) {
            $file = str_replace($controller_path, '', $file);
            $files[] = $file;
        }

        if (count($files) > 0) {
            require_once('tg_transferer/index.php');
            die();
        }
    }

    /**
     * Serve controller class.
     *
     * @return void
     */
    private function serve_controller(): void {
        $segments = SEGMENTS;

        if (isset($segments[1])) {
            $module_with_no_params = explode('?', $segments[1])[0];
            $this->current_module = !empty($module_with_no_params) ? strtolower($module_with_no_params) : $this->current_module;
            $this->current_controller = ucfirst($this->current_module);

            if (defined('TRONGATE_PAGES_TRIGGER') && $segments[1] === TRONGATE_PAGES_TRIGGER) {
                $this->current_module = 'trongate_pages';
                $this->current_controller = 'Trongate_pages';
            }
        }

        if (isset($segments[2])) {
            $method_with_no_params = explode('?', $segments[2])[0];
            $this->current_method = !empty($method_with_no_params) ? strtolower($method_with_no_params) : $this->current_method;

            if (substr($this->current_method, 0, 1) === '_') {
                $this->draw_error_page();
            }
        }

        $this->current_value = isset($segments[3]) ? $segments[3] : $this->current_value;

        $controller_path = '../modules/' . $this->current_module . '/controllers/' . $this->current_controller . '.php';

        if ($controller_path === '../modules/api/controllers/Api.php') {
            $controller_path = '../engine/Api.php';
            require_once $controller_path;

            $target_method = $this->current_method;
            $this->current_controller = new $this->current_controller($this->current_module);

            if (method_exists($this->current_controller, $this->current_method)) {
                $this->current_controller->$target_method($this->current_value);
                return;
            } else {
                $this->draw_error_page();
            }
        }

        switch (segment(1)) {
            case 'dateformat':
                $this->draw_date_format();
                break;

            case 'tgp_element_adder':
                $this->draw_element_adder();
                break;

            default:
                if (!file_exists($controller_path)) {
                    $controller_path = $this->attempt_init_child_controller($controller_path);
                }

                require_once $controller_path;

                if (strtolower(ENV) === 'dev') {
                    $this->attempt_sql_transfer($controller_path);
                }

                $this->invoke_controller_method();
                break;
        }
    }

    private function draw_date_format(): void {
        if (!defined('DEFAULT_DATE_FORMAT')) {
            get_default_date_format();
        }

        if (!defined('DEFAULT_LOCALE_STR')) {
            get_default_locale_str();
        }

        $date_prefs = [
            'default_date_format' => DEFAULT_DATE_FORMAT,
            'default_locale_str' => DEFAULT_LOCALE_STR,
        ];

        http_response_code(200);
        echo json_encode($date_prefs);
        die();
    }

    private function draw_element_adder(): void {
        http_response_code(200);
        $view_file_path = realpath(APPPATH . 'engine/views/element_adder.php');

        if ($view_file_path && file_exists($view_file_path)) {
            $file_content = file_get_contents($view_file_path);
            $file_content = str_replace('[BASE_URL]', BASE_URL, $file_content);
            echo $file_content;
            die();
        } else {
            http_response_code(404);
            echo 'Cannot find ' . $view_file_path;
            die();
        }
    }


    private function invoke_controller_method(): void {
        if (method_exists($this->current_controller, $this->current_method)) {
            $target_method = $this->current_method;
            $this->current_controller = new $this->current_controller($this->current_module);
            $this->current_controller->$target_method($this->current_value);
        } else {
            $this->handle_standard_endpoints();
        }
    }

    private function handle_standard_endpoints(): void {
        $this->current_controller = 'Standard_endpoints';
        $controller_path = '../engine/Standard_endpoints.php';
        require_once $controller_path;

        $se = new Standard_endpoints();
        $endpoint_index = $se->attempt_find_endpoint_index();

        if ($endpoint_index !== '') {
            $target_method = $this->current_method;
            if (is_numeric($target_method)) {
                $se->attempt_serve_standard_endpoint($endpoint_index);
            } else {
                $se->$target_method($this->current_value);
            }

            return;
        }

        $this->draw_error_page();
    }

    /**
     * Attempt initialization of child controller.
     *
     * @param string $controller_path The path to the controller.
     * @return string The path to the controller after initialization.
     */
    private function attempt_init_child_controller(string $controller_path): string {
        $bits = explode('-', $this->current_controller);

        if (count($bits) === 2) {
            if (strlen($bits[1]) > 0) {

                $parent_module = strtolower($bits[0]);
                $child_module = strtolower($bits[1]);
                $this->current_controller = ucfirst($bits[1]);
                $controller_path = '../modules/' . $parent_module . '/' . $child_module . '/controllers/' . ucfirst($bits[1]) . '.php';

                if (file_exists($controller_path)) {
                    return $controller_path;
                }
            }
        }

        //do we have a custom 404 intercept declared?
        if (defined('INTERCEPT_404')) {
            $intercept_bits = explode('/', INTERCEPT_404);
            $this->current_module = $intercept_bits[0];
            $this->current_controller = ucfirst($intercept_bits[0]);
            $this->current_method = $intercept_bits[1];
            $controller_path = '../modules/' . $this->current_module . '/controllers/' . $this->current_controller . '.php';
            if (file_exists($controller_path)) {
                return $controller_path;
            }
        }

        $this->draw_error_page();
    }

    /**
     * Draw an error page.
     *
     * @return void
     */
    private function draw_error_page(): void {
        load('error_404');
        die(); //end of the line (all possible scenarios tried)
    }
}



















//dynamics

<?php

/**
 * dynamic_properties.php
 *
 * This file provides a solution for dynamically setting and getting properties
 * within classes in PHP. It includes a trait called `Dynamic_properties` that
 * can be used by other classes to enable dynamic property handling.
 */

/**
 * Trait Dynamic_properties
 *
 * This trait provides functionality for dynamically setting and getting properties.
 */
trait Dynamic_properties {
    private $attributes = [];

    /**
     * Set a dynamic property.
     *
     * @param string $key The property key.
     * @param mixed $value The value to set.
     * @return void
     */
    public function __set(string $key, $value): void {
        $this->attributes[$key] = $value;
    }

    /**
     * Get a dynamic property.
     *
     * If the property is 'model', it initializes and returns a Model object if not already set.
     * Otherwise, it creates an instance of the class corresponding to the property name if not set.
     *
     * @param string $key The property key.
     * @return mixed The value of the property.
     */
    public function __get(string $key) {
        if ($key === 'model') {
            if (!isset($this->model)) {
                require_once 'Model.php'; // Adjust the path accordingly
                $this->model = new Model($this->module_name); // Adjust instantiation as needed
            }
            return $this->model;
        } elseif (!isset($this->attributes[$key])) {
            // Adjust class instantiation based on property name if needed
            $class_name = ucfirst($key);
            $this->$key = new $class_name; // Adjust instantiation as needed
        }
        return $this->attributes[$key];
    }
}

/**
 * Example usage:
 *
 * class My_Class {
 *     use Dynamic_Properties;
 *     // ...
 * }
 *
 * $obj = new My_Class();
 * $obj->name = 'John Doe'; // Dynamically set the 'name' property
 * $obj->age = 30; // Dynamically set the 'age' property
 *
 * echo $obj->name; // Output: 'John Doe'
 * echo $obj->age; // Output: 30
 *
 * if (isset($obj->email)) {
 *     echo $obj->email; // Property 'email' is not set, so this won't be executed
 * }
 */




 //ignition

 <?php
session_start();
require_once '../config/config.php';
require_once '../config/custom_routing.php';
require_once '../config/database.php';
require_once '../config/site_owner.php';
require_once '../config/themes.php';

spl_autoload_register(function ($class_name) {

    $class_name = str_replace('alidation_helper', 'alidation', $class_name);
    $target_filename = realpath(__DIR__ . '/' . $class_name . '.php');

    if (file_exists($target_filename)) {
        return require_once($target_filename);
    }

    return false;
});

/**
 * Retrieves the URL segments after optionally ignoring custom routes.
 *
 * @param bool|null $ignore_custom_routes Flag to determine whether to ignore custom routes.
 * @return array Returns an associative array with 'assumed_url' and 'segments'.
 */
function get_segments(?bool $ignore_custom_routes = null): array {

    // Figure out how many segments need to be ditched
    $pseudo_url = str_replace('://', '', BASE_URL);
    $pseudo_url = rtrim($pseudo_url, '/');
    $bits = explode('/', $pseudo_url);
    $num_bits = count($bits);

    if ($num_bits > 1) {
        $num_segments_to_ditch = $num_bits - 1;
    } else {
        $num_segments_to_ditch = 0;
    }

    $assumed_url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

    if (!isset($ignore_custom_routes)) {
        $assumed_url = attempt_add_custom_routes($assumed_url);
    }

    $data['assumed_url'] = $assumed_url;

    $assumed_url = str_replace('://', '', $assumed_url);
    $assumed_url = rtrim($assumed_url, '/');

    $segments = explode('/', $assumed_url);

    for ($i = 0; $i < $num_segments_to_ditch; $i++) {
        unset($segments[$i]);
    }

    $data['segments'] = array_values($segments);
    return $data;
}

/**
 * Attempts to replace the target URL with a custom route if a match is found in the custom routes configuration.
 *
 * @param string $target_url The original target URL to potentially replace.
 * @return string Returns the updated URL if a custom route match is found, otherwise returns the original URL.
 */
function attempt_add_custom_routes(string $target_url): string {
    $target_url = rtrim($target_url, '/');
    $target_segments_str = str_replace(BASE_URL, '', $target_url);
    $target_segments = explode('/', $target_segments_str);

    foreach (CUSTOM_ROUTES as $custom_route => $custom_route_destination) {
        $custom_route_segments = explode('/', $custom_route);
        if (count($target_segments) === count($custom_route_segments)) {
            if ($custom_route === $target_segments_str) { // Perfect match; return immediately
                $target_url = str_replace($custom_route, $custom_route_destination, $target_url);
                break;
            }
            $abort_route_check = false;
            $correction_counter = 0;
            $new_custom_url = rtrim(BASE_URL . $custom_route_destination, '/');
            for ($i = 0; $i < count($target_segments); $i++) {
                if ($custom_route_segments[$i] === $target_segments[$i]) {
                    continue;
                } else if ($custom_route_segments[$i] === "(:num)" && is_numeric($target_segments[$i])) {
                    $correction_counter++;
                    $new_custom_url = str_replace('$' . $correction_counter, $target_segments[$i], $new_custom_url);
                } else if ($custom_route_segments[$i] === "(:any)") {
                    $correction_counter++;
                    $new_custom_url = str_replace('$' . $correction_counter, $target_segments[$i], $new_custom_url);
                } else {
                    $abort_route_check = true;
                    break;
                }
            }
            if (!$abort_route_check) {
                $target_url = $new_custom_url;
            }
        }
    }
    return $target_url;
}

define('APPPATH', str_replace("\\", "/", dirname(dirname(__FILE__)) . '/'));
define('REQUEST_TYPE', $_SERVER['REQUEST_METHOD']);
$tg_helpers = ['form_helper', 'flashdata_helper', 'string_helper', 'timedate_helper', 'url_helper', 'utilities_helper'];
define('TRONGATE_HELPERS', $tg_helpers);
$data = get_segments();
define('SEGMENTS', $data['segments']);
define('ASSUMED_URL', $data['assumed_url']);

//load the helper classes
foreach (TRONGATE_HELPERS as $tg_helper) {
    require_once 'tg_helpers/' . $tg_helper . '.php';
}



//template in engine


<?php

/**
 * Manages loading and displaying of content within HTML templates.
 */
class Template {

    /**
     * Retrieves the view module from the current URL.
     *
     * @return string The name of the view module.
     */
    public static function get_view_module(): string {
        // Attempt to get view_module from URL
        $url = str_replace(BASE_URL, '', current_url());
        $url = filter_var($url, FILTER_SANITIZE_URL);
        $url_bits = explode('/', $url);

        if (isset($url_bits[0])) {
            $view_module = $url_bits[0];
            $view_module = str_replace('-', '/', $view_module);
        } else {
            $view_module = DEFAULT_MODULE;
        }

        return $view_module;
    }

    /**
     * Displays the view file for the specified module.
     *
     * @param array|null $data Data to be passed to the view file.
     * @return void
     */
    public static function display(?array $data = null): void {
        if (!isset($data['view_module'])) {
            $data['view_module'] = self::get_view_module();
        }

        if (!isset($data['view_file'])) {
            $data['view_file'] = 'index';
        }

        $file_path = APPPATH . 'modules/' . $data['view_module'] . '/views/' . $data['view_file'] . '.php';
        self::attempt_include($file_path, $data);
    }

    /**
     * Includes a partial view file from the templates directory.
     *
     * @param string $file_name The name of the partial view file to include.
     * @param array|null $data Data to be passed to the partial view file.
     * @return void
     */
    public static function partial(string $file_name, ?array $data = null): void {
        $file_path = APPPATH . 'templates/views/' . $file_name . '.php';
        self::attempt_include($file_path, $data);
    }

    /**
     * Attempts to include a view file, extracting data variables if provided.
     * If the file does not exist, it terminates the script with an error message.
     *
     * @param string $file_path The path to the view file to include.
     * @param array|null $data Data to be extracted for use in the view file.
     * @return void
     */
    private static function attempt_include(string $file_path, ?array $data = null): void {
        if (file_exists($file_path)) {
            if (isset($data)) {
                extract($data);
            }

            require_once($file_path);
        } else {
            die('<br><b>ERROR:</b> View file does not exist at: ' . $file_path);
        }
    }
}




//Trongate_token


<?php
class Trongate_tokens extends Trongate {

    private $default_token_lifespan = 86400; // one day

    /**
     * Attempt to validate and return a token based on optional user level(s) condition.
     * This method checks for a valid token in the following locations, in order of priority:
     * 1. HTTP headers ($_SERVER['HTTP_TRONGATETOKEN'])
     * 2. Cookies ($_COOKIE['trongatetoken'])
     * 3. Session ($_SESSION['trongatetoken'])
     *
     * @param int|array|null $user_levels User levels to filter tokens.
     * @return string|bool The valid token if found, or false if none is found.
     */
    public function _attempt_get_valid_token($user_levels = null): string|bool {
        // Initialize array to store user tokens
        $user_tokens = [];

        // Check for token in headers
        if (isset($_SERVER['HTTP_TRONGATETOKEN'])) {
            $user_tokens[] = htmlspecialchars($_SERVER['HTTP_TRONGATETOKEN'], ENT_QUOTES, 'UTF-8');
        }

        // Check for token in cookie
        if (isset($_COOKIE['trongatetoken'])) {
            $user_tokens[] = htmlspecialchars($_COOKIE['trongatetoken'], ENT_QUOTES, 'UTF-8');
        }

        // Check for token in session
        if (isset($_SESSION['trongatetoken'])) {
            $user_tokens[] = htmlspecialchars($_SESSION['trongatetoken'], ENT_QUOTES, 'UTF-8');
        }

        // If no tokens found, return false
        if (empty($user_tokens)) {
            return false;
        }

        // Determine type of user levels provided
        $user_levels_type = gettype($user_levels);

        // Initialize token variable
        $token = false;

        // Execute SQL query based on user levels
        switch ($user_levels_type) {
            case 'integer':
                // Allow access for ONE user level type
                $token = $this->execute_sql_single($user_tokens, $user_levels);
                break;
            case 'array':
                // Allow access for MORE THAN ONE user level type
                $token = $this->execute_sql_multi($user_tokens, $user_levels);
                break;
            default:
                // Allow access for ANY user level type
                $token = $this->execute_sql_default($user_tokens);
                break;
        }

        return $token;
    }

    /**
     * Destroy tokens from session, cookie, and HTTP headers.
     *
     * This method removes tokens from session, cookie, and HTTP headers storage, and deletes them from the database.
     *
     * @return void
     */
    public function _destroy(): void {
        $tokens_to_delete = [];

        // Check and unset session token
        if (isset($_SESSION['trongatetoken'])) {
            $tokens_to_delete[] = $_SESSION['trongatetoken'];
            $_SESSION['trongatetoken'] = 'x'; // fallback
            unset($_SESSION['trongatetoken']);
        }

        // Check and destroy cookie token
        if (isset($_COOKIE['trongatetoken'])) {
            $tokens_to_delete[] = $_COOKIE['trongatetoken'];
            $past_date = time() - 86400;
            setcookie('trongatetoken', 'x', $past_date, '/');
        }

        // Check and add token from HTTP headers
        if (isset($_SERVER['HTTP_TRONGATETOKEN'])) {
            $tokens_to_delete[] = htmlspecialchars($_SERVER['HTTP_TRONGATETOKEN'], ENT_QUOTES, 'UTF-8');
        }

        // Delete tokens from the database
        if (!empty($tokens_to_delete)) {
            foreach ($tokens_to_delete as $token) {
                $params['token'] = $token;
                $sql = 'delete from trongate_tokens where token = :token';
                $this->model->query_bind($sql, $params);
            }
        }

        // Delete expired tokens from the database
        $this->_delete_old_tokens();
    }

    /**
     * Delete old tokens from the database.
     *
     * This function deletes tokens that have expired. If a user ID is provided,
     * it also deletes tokens associated with that user.
     *
     * @param int|null $user_id Optional user ID to delete tokens for a specific user.
     * @return void
     */
    public function _delete_old_tokens(?int $user_id = null): void {
        $sql = 'delete from trongate_tokens where expiry_date < :nowtime';
        $data['nowtime'] = time();

        if (isset($user_id)) {
            $sql .= ' or user_id = :user_id';
            $data['user_id'] = $user_id;
        }

        $this->model->query_bind($sql, $data);
    }

    /**
     * Retrieves the Trongate user ID based on a provided token, session, cookie, or page header.
     *
     * This method attempts to retrieve the Trongate user ID based on the provided token,
     * or it checks session, cookie, and page header values if no token is provided.
     *
     * @param string|null $token Optional. The token to retrieve the user ID for.
     * @return int|false The Trongate user ID if found, or false if not found.
     */
    public function _get_user_id(?string $token = null): int|false {
        $params = [];

        // Prepare parameters based on provided token, session, cookie, or page headers
        if (isset($token)) {
            $params['token'] = $token;
        } else {
            if (isset($_COOKIE['trongatetoken'])) {
                $params['cookie'] = htmlspecialchars($_COOKIE['trongatetoken'], ENT_QUOTES, 'UTF-8');
            }
            if (isset($_SESSION['trongatetoken'])) {
                $params['session'] = htmlspecialchars($_SESSION['trongatetoken'], ENT_QUOTES, 'UTF-8');
            }
            if (isset($_SERVER['HTTP_TRONGATETOKEN'])) {
                $params['header'] = htmlspecialchars($_SERVER['HTTP_TRONGATETOKEN'], ENT_QUOTES, 'UTF-8');
            }
        }

        // If no params, return false immediately
        if (empty($params)) {
            return false;
        }

        $where_clause = implode(' OR ', array_map(fn($key) => "token = :$key", array_keys($params)));
        $sql = 'SELECT user_id FROM trongate_tokens WHERE ' . $where_clause;
        $rows = $this->model->query_bind($sql, $params, 'object');
        return isset($rows[0]) ? $rows[0]->user_id : false;
    }

    /**
     * Get the Trongate user object based on a token, session, cookie, or page headers.
     *
     * This method attempts to retrieve the Trongate user object based on the provided token,
     * or it checks session, cookie, and page header values if no token is provided.
     *
     * @param string|null $token (optional) The token to use for fetching the user object.
     * @return object|false The Trongate user object if found, or false if not found.
     */
    public function _get_user_obj(?string $token = null): object|false {
        $params = [];

        // Prepare parameters based on provided token, session, cookie, or page headers
        if (isset($token)) {
            $params['token'] = $token;
        } else {
            if (isset($_COOKIE['trongatetoken'])) {
                $params['cookie'] = htmlspecialchars($_COOKIE['trongatetoken'], ENT_QUOTES, 'UTF-8');
            }
            if (isset($_SESSION['trongatetoken'])) {
                $params['session'] = htmlspecialchars($_SESSION['trongatetoken'], ENT_QUOTES, 'UTF-8');
            }
            if (isset($_SERVER['HTTP_TRONGATETOKEN'])) {
                $params['header'] = htmlspecialchars($_SERVER['HTTP_TRONGATETOKEN'], ENT_QUOTES, 'UTF-8');
            }
        }

        // If no params, return false immediately
        if (empty($params)) {
            return false;
        }

        // Construct the SQL query
        $sql = '
            SELECT
                u.code as trongate_user_code,
                u.user_level_id,
                ul.level_title as user_level,
                t.token,
                t.user_id as trongate_user_id,
                t.expiry_date 
            FROM
                trongate_tokens t
            INNER JOIN
                trongate_users u ON t.user_id = u.id
            INNER JOIN
                trongate_user_levels ul ON u.user_level_id = ul.id ';

        // Add WHERE clause if token is provided or found in page headers, cookie, or session
        if (isset($token) || !empty($params)) {
            $where_clause = implode(' OR ', array_map(fn($key) => "t.token = :$key", array_keys($params)));
            $sql .= 'WHERE ' . $where_clause;
        }

        // Execute the query and return the result
        $rows = $this->model->query_bind($sql, $params, 'object');
        return isset($rows[0]) ? $rows[0] : false;
    }

    /**
     * Retrieves the user level associated with the given token or the current user token.
     *
     * @param string|null $token (optional) The token used to identify the user. If not provided, the token of the current user is used.
     * @return string|false The user level title if found, otherwise false.
     */
    public function _get_user_level(?string $token = null): string|false {
        // If token is not provided, get the user object to fetch the token
        if (!$token) {
            $user_obj = $this->_get_user_obj();
            if ($user_obj === false) {
                return false; // Return false if user object not found
            }
            $token = $user_obj->token;
        }

        // Call _get_user_obj() with the provided or retrieved token
        $user_obj = $this->_get_user_obj($token);

        // Return user level title if user object is found, otherwise return false
        return $user_obj !== false ? $user_obj->user_level : false;
    }


    

    /**
     * Generate a token based on provided data.
     *
     * @param array $data An array containing token generation parameters.
     *   - 'user_id' (int) : required - The user's ID.
     *   - 'expiry_date' (int) : optional - Unix timestamp for token expiration.
     *   - 'set_cookie' (bool) : optional - If true, set the token as a cookie.
     *   - 'code' (string) : optional - Custom code for the token.
     *
     * @return string The generated token.
     */
    public function _generate_token(array $data): string {
        // Generate a 32-character random string
        $random_string = make_rand_str();

        // Build data array variables (required for table insert)
        if (!isset($data['expiry_date'])) {
            $data['expiry_date'] = time() + $this->default_token_lifespan;
        }

        $data['token'] = $random_string;
        $params = $data;

        if (isset($params['set_cookie'])) {
            unset($params['set_cookie']);
        }

        $this->model->insert($params, 'trongate_tokens');

        if (isset($data['set_cookie'])) {
            setcookie('trongatetoken', $random_string, $data['expiry_date'], '/');
        } else {
            $_SESSION['trongatetoken'] = $random_string;
        }

        return $random_string;
    }

    /**
     * Regenerate a token with a new expiration date.
     *
     * This method regenerates a token with a new expiration date. It validates
     * the input format of the old token and the expiration date before proceeding.
     * If the input format is invalid or the old token does not exist, appropriate
     * HTTP response codes are set to indicate the failure reason.
     *
     * @return void
     */
    public function regenerate(): void {
        $old_token = segment(3);
        $expiry_date = segment(4);

        // Validate input format
        if (strlen($old_token) !== 32 || !is_numeric($expiry_date) || $expiry_date < time()) {
            http_response_code(400); // Bad Request
            die();
        }

        // Check if the token exists
        $sql = 'SELECT * FROM trongate_tokens WHERE token = :token LIMIT 1';
        $tokens = $this->model->query_bind($sql, ['token' => $old_token], 'object');

        if (empty($tokens)) {
            http_response_code(404); // Not Found
            echo 'Token not found.';
            die();
        }

        $token = $tokens[0];

        // Generate new token and update database
        $new_token = make_rand_str();
        $update_data = [
            'expiry_date' => $expiry_date,
            'token' => $new_token
        ];

        $this->model->update($token->id, $update_data, 'trongate_tokens');

        // Return the new token
        http_response_code(200); // OK
        echo $new_token;
    }

    /**
     * Execute SQL query for a single user level.
     *
     * @param string[] $user_tokens An array of user tokens to search.
     * @param int $user_levels The user level to filter tokens.
     * @return string|false The valid token if found, or false if none is found.
     */
    private function execute_sql_single(array $user_tokens, int $user_levels): string|false {
        // allow access for ONE user level type
        $where_condition = ' WHERE trongate_tokens.token = :token ';
        $params['user_level_id'] = $user_levels; // int
        $params['nowtime'] = time();

        foreach ($user_tokens as $token) {
            $params['token'] = $token;
            $sql = 'SELECT 
                            trongate_tokens.token 
                    FROM 
                            trongate_tokens 
                    INNER JOIN
                            trongate_users 
                    ON  
                            trongate_tokens.user_id = trongate_users.id
                    ' . $where_condition . ' 
                    AND 
                            trongate_users.user_level_id = :user_level_id';
            $sql .= ' AND expiry_date > :nowtime ';
            $rows = $this->model->query_bind($sql, $params, 'object');

            if (count($rows) > 0) {
                $token = $rows[0]->token;
                return $token;
            }
        }

        return false;
    }

    /**
     * Execute SQL query for multiple user levels.
     *
     * @param string[] $user_tokens An array of user tokens to search.
     * @param int[] $user_levels An array of user levels to filter tokens.
     * @return string|false The valid token if found, or false if none is found.
     */
    private function execute_sql_multi(array $user_tokens, array $user_levels): string|false {
        // allow access for MORE THAN ONE user level type
        $where_condition = ' WHERE trongate_tokens.token = :token ';
        $params['nowtime'] = time();

        $and_condition = ' AND (';
        $count = 0;
        foreach ($user_levels as $user_level) {
            $count++;

            $this_property = 'user_level_' . $count;
            $params[$this_property] = $user_level;

            if ($count > 1) {
                $and_condition .= ' OR';
            }

            $and_condition .= ' trongate_users.user_level_id = :' . $this_property;
        }
        $and_condition .= ')';
        $and_condition = ltrim(trim($and_condition));

        foreach ($user_tokens as $token) {
            $params['token'] = $token;
            $sql = 'SELECT 
                            trongate_tokens.token 
                    FROM 
                            trongate_tokens 
                    INNER JOIN
                            trongate_users 
                    ON  
                            trongate_tokens.user_id = trongate_users.id
                    ' . $where_condition . ' 
                    ' . $and_condition;
            $sql .= ' AND expiry_date > :nowtime ';
            $rows = $this->model->query_bind($sql, $params, 'object');

            if (count($rows) > 0) {
                $token = $rows[0]->token;
                return $token;
            }
        }

        return false;
    }

    /**
     * Execute SQL query for any user level type.
     *
     * @param string[] $user_tokens An array of user tokens to search.
     * @return string|false The valid token if found, or false if none is found.
     */
    private function execute_sql_default(array $user_tokens): string|false {
        // allow access for ANY user level type
        $where_condition = ' WHERE trongate_tokens.token = :token ';
        $params['nowtime'] = time();

        foreach ($user_tokens as $token) {
            $params['token'] = $token;
            $sql = 'SELECT 
                            trongate_tokens.token 
                    FROM 
                            trongate_tokens 
                    ' . $where_condition;
            $sql .= ' AND expiry_date > :nowtime ';
            $rows = $this->model->query_bind($sql, $params, 'object');

            if (count($rows) > 0) {
                $token = $rows[0]->token;
                return $token;
            }
        }

        return false;
    }

}





<!-- Content Wrapper -->
<div id="content-wrapper" class="d-flex flex-column">

    <!-- Main Content -->
    <div id="content">

        <!-- Topbar -->
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

            <!-- Sidebar Toggle (Topbar) -->
            <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                <i class="fa fa-bars"></i>
            </button>

            <?php  require_once ("_navigation.php"); ?>


        <!-- Begin Page Content -->
        <div class="container-fluid">

            <!-- Page Heading -->
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h6 class="h3 mb-0 text-gray-800">Dashboard</h6>
                <a href="" class="d-none d-sm-inline-block btn btn-primary shadow-sm"><i class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>
            </div>
            <!-- Content Row Start-->
            <div class="row">
                <!-- Area Chart -->
                <div class="col-md-6 col-lg-7 col-xl-8">
                    <!-- Content Row -->
                    <div class="row">
                        <!-- Earnings (Monthly) Card Example -->
                        <div class="col-md-3 mb-3">
                            <div class="card border-left-info shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Total Pending</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Pending Requests Card Example -->
                        <div class="col-md-3 mb-3">
                            <div class="card border-left-warning shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                                Total Pending</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800"></div>
                                        </div>
                                    
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card border-left-warning shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                                Total Pending</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800"></div>
                                        </div>
                                    
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card border-left-primary shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                Total Pending</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800"></div>
                                        </div>
                                    
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Content Row -->
                    <div class="card shadow mb-4">
                        <!-- Card Header - Dropdown -->
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>
                            <div class="dropdown no-arrow">
                                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                </a>
                            </div>
                        </div>
                        <!-- Card Body -->
                        <div class="card-body">
                            <div class="chart-area">
                                <canvas id="myAreaChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Pie Chart -->
                <div class="col-md-6 col-lg-5 col-xl-4">
                    
                    <div class="card shadow mb-4">
                        <!-- Card Header - Dropdown -->
                        <div
                            class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">Conversion rate</h6>
                            <div class="dropdown no-arrow">
                                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                   0
                                </a>
                                
                            </div>
                        </div>
                        <div class="card-body">
                            <h4 class="small font-weight-bold">
                                Added to ...
                                <span class="float-right">pending</span>
                            </h4>
                            <div class="progress mb-4">
                                <div class="progress-bar bg-danger" role="progressbar" style="width: <?= $num_unique_visits/$num_total_visits * 100;?>%"
                                    aria-valuenow="<?= $num_unique_visits/$num_total_visits * 100;?>" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <h4 class="small font-weight-bold">
                                Reached checkou
                                <span class="float-right">pending</span></h4>
                            <div class="progress mb-4">
                                <div class="progress-bar bg-warning" role="progressbar" style="width: <?= 0; ?>%"
                                    aria-valuenow="<?= 0 ?>" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>
                            <h4 class="small font-weight-bold">
                                Final purchase  
                                <span class="float-right"><?= 0;?>% </span>
                            </h4>
                            <div class="progress mb-4">
                                <div class="progress-bar" role="progressbar" style="width: <?= 0;?>%"
                                    aria-valuenow="<?= 0;?>" aria-valuemin="0" aria-valuemax="100">
                                </div>
                            </div>                                
                        </div>
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">Table Data 1</h6>
                            <div class="dropdown no-arrow">
                                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                </a>
                            </div>
                        </div>
                        <!-- Card Body -->                                
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered small-table"  width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th>S/N</th>
                                            <th>Name</th>
                                            <th>Service</th>
                                           
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>1</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                        </tr>
                                        <tr>
                                            <td>2</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Content Row End -->

            <!-- Content Row Start -->

            <div class="row">
                <div class="col-lg-12 mb-4">
                    <!-- DataTales Example -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Data Table 2</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered dataTable"  width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th>S/N</th>
                                            <th>Name</th>
                                            <th>Service</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>1</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>
                                        <tr>
                                            <td>2</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr> 
                                        <tr>
                                            <td>1</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>
                                        <tr>
                                            <td>3</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>           
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>                             
            </div>
            <!-- Content Row End -->

            <!-- Row Start -->
            <div class="row">   
                <div class="col-lg-12 mb-4">
                    <!-- DataTales Example -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">Data table 3</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-bordered dataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th>S/N</th>
                                            <th>Name</th>
                                            <th>Service</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>1</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>
                                        <tr>
                                            <td>2</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr> 
                                        <tr>
                                            <td>1</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>
                                        <tr>
                                            <td>3</td>
                                            <td>Data pending</td>
                                            <td>Data pending</td>
                                            <td><a href="" class="btn btn-primary"></a></td>
                                        </tr>           
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Row End -->
        </div>
    </div>
    <!-- End of Main Content -->



